/*
 * Copyright 2022 The flomesh.io Authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Code generated by informer-gen. DO NOT EDIT.

package externalversions

import (
	"fmt"

	v1alpha1 "github.com/flomesh-io/ErieCanal/apis/cluster/v1alpha1"
	globaltrafficpolicyv1alpha1 "github.com/flomesh-io/ErieCanal/apis/globaltrafficpolicy/v1alpha1"
	multiclusterendpointv1alpha1 "github.com/flomesh-io/ErieCanal/apis/multiclusterendpoint/v1alpha1"
	namespacedingressv1alpha1 "github.com/flomesh-io/ErieCanal/apis/namespacedingress/v1alpha1"
	serviceexportv1alpha1 "github.com/flomesh-io/ErieCanal/apis/serviceexport/v1alpha1"
	serviceimportv1alpha1 "github.com/flomesh-io/ErieCanal/apis/serviceimport/v1alpha1"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	cache "k8s.io/client-go/tools/cache"
)

// GenericInformer is type of SharedIndexInformer which will locate and delegate to other
// sharedInformers based on type
type GenericInformer interface {
	Informer() cache.SharedIndexInformer
	Lister() cache.GenericLister
}

type genericInformer struct {
	informer cache.SharedIndexInformer
	resource schema.GroupResource
}

// Informer returns the SharedIndexInformer.
func (f *genericInformer) Informer() cache.SharedIndexInformer {
	return f.informer
}

// Lister returns the GenericLister.
func (f *genericInformer) Lister() cache.GenericLister {
	return cache.NewGenericLister(f.Informer().GetIndexer(), f.resource)
}

// ForResource gives generic access to a shared informer of the matching type
// TODO extend this to unknown resources with a client pool
func (f *sharedInformerFactory) ForResource(resource schema.GroupVersionResource) (GenericInformer, error) {
	switch resource {
	// Group=cluster, Version=v1alpha1
	case v1alpha1.SchemeGroupVersion.WithResource("clusters"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Cluster().V1alpha1().Clusters().Informer()}, nil

		// Group=globaltrafficpolicy, Version=v1alpha1
	case globaltrafficpolicyv1alpha1.SchemeGroupVersion.WithResource("globaltrafficpolicies"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Globaltrafficpolicy().V1alpha1().GlobalTrafficPolicies().Informer()}, nil

		// Group=multiclusterendpoint, Version=v1alpha1
	case multiclusterendpointv1alpha1.SchemeGroupVersion.WithResource("multiclusterendpoints"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Multiclusterendpoint().V1alpha1().MultiClusterEndpoints().Informer()}, nil

		// Group=namespacedingress, Version=v1alpha1
	case namespacedingressv1alpha1.SchemeGroupVersion.WithResource("namespacedingresses"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Namespacedingress().V1alpha1().NamespacedIngresses().Informer()}, nil

		// Group=serviceexport, Version=v1alpha1
	case serviceexportv1alpha1.SchemeGroupVersion.WithResource("serviceexports"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Serviceexport().V1alpha1().ServiceExports().Informer()}, nil

		// Group=serviceimport, Version=v1alpha1
	case serviceimportv1alpha1.SchemeGroupVersion.WithResource("serviceimports"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Serviceimport().V1alpha1().ServiceImports().Informer()}, nil

	}

	return nil, fmt.Errorf("no informer found for %v", resource)
}
