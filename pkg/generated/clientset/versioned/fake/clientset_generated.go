/*
 * Copyright 2022 The flomesh.io Authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	clientset "github.com/flomesh-io/ErieCanal/pkg/generated/clientset/versioned"
	clusterv1alpha1 "github.com/flomesh-io/ErieCanal/pkg/generated/clientset/versioned/typed/cluster/v1alpha1"
	fakeclusterv1alpha1 "github.com/flomesh-io/ErieCanal/pkg/generated/clientset/versioned/typed/cluster/v1alpha1/fake"
	globaltrafficpolicyv1alpha1 "github.com/flomesh-io/ErieCanal/pkg/generated/clientset/versioned/typed/globaltrafficpolicy/v1alpha1"
	fakeglobaltrafficpolicyv1alpha1 "github.com/flomesh-io/ErieCanal/pkg/generated/clientset/versioned/typed/globaltrafficpolicy/v1alpha1/fake"
	multiclusterendpointv1alpha1 "github.com/flomesh-io/ErieCanal/pkg/generated/clientset/versioned/typed/multiclusterendpoint/v1alpha1"
	fakemulticlusterendpointv1alpha1 "github.com/flomesh-io/ErieCanal/pkg/generated/clientset/versioned/typed/multiclusterendpoint/v1alpha1/fake"
	namespacedingressv1alpha1 "github.com/flomesh-io/ErieCanal/pkg/generated/clientset/versioned/typed/namespacedingress/v1alpha1"
	fakenamespacedingressv1alpha1 "github.com/flomesh-io/ErieCanal/pkg/generated/clientset/versioned/typed/namespacedingress/v1alpha1/fake"
	serviceexportv1alpha1 "github.com/flomesh-io/ErieCanal/pkg/generated/clientset/versioned/typed/serviceexport/v1alpha1"
	fakeserviceexportv1alpha1 "github.com/flomesh-io/ErieCanal/pkg/generated/clientset/versioned/typed/serviceexport/v1alpha1/fake"
	serviceimportv1alpha1 "github.com/flomesh-io/ErieCanal/pkg/generated/clientset/versioned/typed/serviceimport/v1alpha1"
	fakeserviceimportv1alpha1 "github.com/flomesh-io/ErieCanal/pkg/generated/clientset/versioned/typed/serviceimport/v1alpha1/fake"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/watch"
	"k8s.io/client-go/discovery"
	fakediscovery "k8s.io/client-go/discovery/fake"
	"k8s.io/client-go/testing"
)

// NewSimpleClientset returns a clientset that will respond with the provided objects.
// It's backed by a very simple object tracker that processes creates, updates and deletions as-is,
// without applying any validations and/or defaults. It shouldn't be considered a replacement
// for a real clientset and is mostly useful in simple unit tests.
func NewSimpleClientset(objects ...runtime.Object) *Clientset {
	o := testing.NewObjectTracker(scheme, codecs.UniversalDecoder())
	for _, obj := range objects {
		if err := o.Add(obj); err != nil {
			panic(err)
		}
	}

	cs := &Clientset{tracker: o}
	cs.discovery = &fakediscovery.FakeDiscovery{Fake: &cs.Fake}
	cs.AddReactor("*", "*", testing.ObjectReaction(o))
	cs.AddWatchReactor("*", func(action testing.Action) (handled bool, ret watch.Interface, err error) {
		gvr := action.GetResource()
		ns := action.GetNamespace()
		watch, err := o.Watch(gvr, ns)
		if err != nil {
			return false, nil, err
		}
		return true, watch, nil
	})

	return cs
}

// Clientset implements clientset.Interface. Meant to be embedded into a
// struct to get a default implementation. This makes faking out just the method
// you want to test easier.
type Clientset struct {
	testing.Fake
	discovery *fakediscovery.FakeDiscovery
	tracker   testing.ObjectTracker
}

func (c *Clientset) Discovery() discovery.DiscoveryInterface {
	return c.discovery
}

func (c *Clientset) Tracker() testing.ObjectTracker {
	return c.tracker
}

var (
	_ clientset.Interface = &Clientset{}
	_ testing.FakeClient  = &Clientset{}
)

// ClusterV1alpha1 retrieves the ClusterV1alpha1Client
func (c *Clientset) ClusterV1alpha1() clusterv1alpha1.ClusterV1alpha1Interface {
	return &fakeclusterv1alpha1.FakeClusterV1alpha1{Fake: &c.Fake}
}

// GlobaltrafficpolicyV1alpha1 retrieves the GlobaltrafficpolicyV1alpha1Client
func (c *Clientset) GlobaltrafficpolicyV1alpha1() globaltrafficpolicyv1alpha1.GlobaltrafficpolicyV1alpha1Interface {
	return &fakeglobaltrafficpolicyv1alpha1.FakeGlobaltrafficpolicyV1alpha1{Fake: &c.Fake}
}

// MulticlusterendpointV1alpha1 retrieves the MulticlusterendpointV1alpha1Client
func (c *Clientset) MulticlusterendpointV1alpha1() multiclusterendpointv1alpha1.MulticlusterendpointV1alpha1Interface {
	return &fakemulticlusterendpointv1alpha1.FakeMulticlusterendpointV1alpha1{Fake: &c.Fake}
}

// NamespacedingressV1alpha1 retrieves the NamespacedingressV1alpha1Client
func (c *Clientset) NamespacedingressV1alpha1() namespacedingressv1alpha1.NamespacedingressV1alpha1Interface {
	return &fakenamespacedingressv1alpha1.FakeNamespacedingressV1alpha1{Fake: &c.Fake}
}

// ServiceexportV1alpha1 retrieves the ServiceexportV1alpha1Client
func (c *Clientset) ServiceexportV1alpha1() serviceexportv1alpha1.ServiceexportV1alpha1Interface {
	return &fakeserviceexportv1alpha1.FakeServiceexportV1alpha1{Fake: &c.Fake}
}

// ServiceimportV1alpha1 retrieves the ServiceimportV1alpha1Client
func (c *Clientset) ServiceimportV1alpha1() serviceimportv1alpha1.ServiceimportV1alpha1Interface {
	return &fakeserviceimportv1alpha1.FakeServiceimportV1alpha1{Fake: &c.Fake}
}
