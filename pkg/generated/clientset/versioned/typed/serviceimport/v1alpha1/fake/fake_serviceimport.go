/*
 * MIT License
 *
 * Copyright (c) since 2021,  flomesh.io Authors.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	"context"

	v1alpha1 "github.com/flomesh-io/ErieCanal/apis/serviceimport/v1alpha1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeServiceImports implements ServiceImportInterface
type FakeServiceImports struct {
	Fake *FakeServiceimportV1alpha1
	ns   string
}

var serviceimportsResource = schema.GroupVersionResource{Group: "serviceimport", Version: "v1alpha1", Resource: "serviceimports"}

var serviceimportsKind = schema.GroupVersionKind{Group: "serviceimport", Version: "v1alpha1", Kind: "ServiceImport"}

// Get takes name of the serviceImport, and returns the corresponding serviceImport object, and an error if there is any.
func (c *FakeServiceImports) Get(ctx context.Context, name string, options v1.GetOptions) (result *v1alpha1.ServiceImport, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewGetAction(serviceimportsResource, c.ns, name), &v1alpha1.ServiceImport{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.ServiceImport), err
}

// List takes label and field selectors, and returns the list of ServiceImports that match those selectors.
func (c *FakeServiceImports) List(ctx context.Context, opts v1.ListOptions) (result *v1alpha1.ServiceImportList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewListAction(serviceimportsResource, serviceimportsKind, c.ns, opts), &v1alpha1.ServiceImportList{})

	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &v1alpha1.ServiceImportList{ListMeta: obj.(*v1alpha1.ServiceImportList).ListMeta}
	for _, item := range obj.(*v1alpha1.ServiceImportList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested serviceImports.
func (c *FakeServiceImports) Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewWatchAction(serviceimportsResource, c.ns, opts))

}

// Create takes the representation of a serviceImport and creates it.  Returns the server's representation of the serviceImport, and an error, if there is any.
func (c *FakeServiceImports) Create(ctx context.Context, serviceImport *v1alpha1.ServiceImport, opts v1.CreateOptions) (result *v1alpha1.ServiceImport, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewCreateAction(serviceimportsResource, c.ns, serviceImport), &v1alpha1.ServiceImport{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.ServiceImport), err
}

// Update takes the representation of a serviceImport and updates it. Returns the server's representation of the serviceImport, and an error, if there is any.
func (c *FakeServiceImports) Update(ctx context.Context, serviceImport *v1alpha1.ServiceImport, opts v1.UpdateOptions) (result *v1alpha1.ServiceImport, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateAction(serviceimportsResource, c.ns, serviceImport), &v1alpha1.ServiceImport{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.ServiceImport), err
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
func (c *FakeServiceImports) UpdateStatus(ctx context.Context, serviceImport *v1alpha1.ServiceImport, opts v1.UpdateOptions) (*v1alpha1.ServiceImport, error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateSubresourceAction(serviceimportsResource, "status", c.ns, serviceImport), &v1alpha1.ServiceImport{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.ServiceImport), err
}

// Delete takes name of the serviceImport and deletes it. Returns an error if one occurs.
func (c *FakeServiceImports) Delete(ctx context.Context, name string, opts v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewDeleteActionWithOptions(serviceimportsResource, c.ns, name, opts), &v1alpha1.ServiceImport{})

	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeServiceImports) DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error {
	action := testing.NewDeleteCollectionAction(serviceimportsResource, c.ns, listOpts)

	_, err := c.Fake.Invokes(action, &v1alpha1.ServiceImportList{})
	return err
}

// Patch applies the patch and returns the patched serviceImport.
func (c *FakeServiceImports) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *v1alpha1.ServiceImport, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewPatchSubresourceAction(serviceimportsResource, c.ns, name, pt, data, subresources...), &v1alpha1.ServiceImport{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.ServiceImport), err
}
